\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename xpybar.info
@settitle xpybar
@afourpaper
@documentencoding UTF-8
@documentlanguage en
@finalout
@c %**end of header


@dircategory Desktop environment
@direntry
* xpybar: (xpybar).                  Highly extensible minimalistic dock panel
@end direntry


@copying
Copyright @copyright{} 2015 Mattias Andrée

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts. A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@ifnottex
@node Top
@top xpybar -- Highly extensible minimalistic dock panel
@insertcopying
@end ifnottex

@titlepage
@title xpybar
@subtitle Highly extensible minimalistic dock panel
@author by Mattias Andrée (maandree)

@page
@center `Monitor. @b{Everything.}'
@center `Makes sense to me.'
@vskip 0pt plus 1filll
@insertcopying
@page
@end titlepage

@contents



@menu
* Overview::                        Brief overview of @command{xpybar}.
* Invoking::                        Executing @command{xpybar}.
* GNU Free Documentation License::  Copying and sharing this manual.
@end menu



@node Overview
@chapter Overview
@command{xpybar} is a minimalistic dock panel with high extensibility.
Its source code is designed so that all parts of it can be replaced by
a configuration script. This is one of the reasons @command{xpybar} is
written in Python. Backwards compatibility will never break on
point-releases.

@command{xpybar} itself is very small, but it comes with a large array
of extensions (installed to @file{/usr/share/xpybar/plugins}). The
extensions come with associated configuration script examples
(installed to @command{/usr/share/xpybar/examples/plugins}.) There are
some additional examples in @command{/usr/share/xpybar/examples}.



@node Invoking
@chapter Invoking

@command{xpybar} recognises the following options:
@table @option{}
@item -c
@itemx --configurations FILE
Select configuration script. If not used, the program will search for
a file named @file{xpybarrc} or @file{.xpybarrc} (depending on the
directory) in the usual configuration directories.

The configuration script must be written in Python 3,
it will be loaded as part of the xpybar's source code itself.


@item -h
@itemx -?
@itemx --help
Print this help information.

@item -v
@itemx --version
Print program name and version.

@item -C
@itemx --copying
@itemx --copyright
Print copyright information.

@item -W
@itemx --warranty
Print non-warranty information.

@item --
Anything after @option{--} will be available to the configuration
script via the variable @code{config_file}, which is a list.
@end table



@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl.texinfo

@bye

